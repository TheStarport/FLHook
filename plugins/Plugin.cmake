if (PLUGIN_IS_EXAMPLE)
    message(STATUS "Processing Example: ${PLUGIN_NAME}")
else ()
    message(STATUS "Processing Plugin: ${PLUGIN_NAME}")
endif ()

if (${PLUGIN_VERSION})
    project(${PLUGIN_NAME} LANGUAGES CXX VERSION ${PLUGIN_VERSION})
else ()
    project(${PLUGIN_NAME} LANGUAGES CXX)
endif ()

file(GLOB_RECURSE PLUGIN_SOURCE_FILES LIST_DIRECTORIES false
        "${PLUGIN_PATH}/*.c*"
        "${PLUGIN_PATH}/*.h*"
        "${INCLUDE_PATH}/*.c*"
        "${INCLUDE_PATH}/*.h*"
        "${SDK_PATH}/*.h"
)

add_library("${PLUGIN_NAME}" SHARED ${PLUGIN_SOURCE_FILES}
        ${INCLUDE_PATH}/PCH.hpp ${INCLUDE_PATH}/PCH.cpp
)

message(STATUS ${PLUGIN_OUTPUT_DIR})
set_target_properties("${PLUGIN_NAME}" PROPERTIES
        LINKER_LANGUAGE CXX
        ARCHIVE_OUTPUT_DIRECTORY ${PLUGIN_OUTPUT_DIR}
        ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PLUGIN_OUTPUT_DIR}
        ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PLUGIN_OUTPUT_DIR}
        LIBRARY_OUTPUT_DIRECTORY ${PLUGIN_OUTPUT_DIR}
        LIBRARY_OUTPUT_DIRECTORY_DEBUG ${PLUGIN_OUTPUT_DIR}
        LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PLUGIN_OUTPUT_DIR}
        RUNTIME_OUTPUT_DIRECTORY ${PLUGIN_OUTPUT_DIR}
        RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PLUGIN_OUTPUT_DIR}
        RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PLUGIN_OUTPUT_DIR}
)

target_compile_definitions(${PLUGIN_NAME} PRIVATE
        "_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING;"
        "_CRT_SECURE_NO_WARNINGS;"
        "WIN32_LEAN_AND_MEAN;"
        "UNICODE;_UNICODE;"
        "USE_GLM;"
        "NOMINMAX;"
        "SERVER;"
        "REFLECT_CPP_NO_C_ARRAYS_OR_INHERITANCE;"
)

target_dependencies(${PLUGIN_NAME})

# Add FLHook as a dependency to force build order
add_dependencies(${PLUGIN_NAME} ${ROOT_PROJECT_NAME})

# Link against FLHook
target_link_libraries(${PLUGIN_NAME} PRIVATE ${PROJECT_OUTPUT_DIR}/${ROOT_PROJECT_NAME}.lib)

set_post_build(${PLUGIN_NAME})

# Cleanup
unset(PLUGIN_VERSION)
unset(PLUGIN_NAME)
unset(PLUGIN_PATH)